This is a complete C++-style Hartree-Fock program written by Ziqi Wang. Currently, the program supports Restricted Hartree-Fock (RHF), Unrestricted Hartree-Fock(UHF) and Restricted Open-shell Hartree-Fock(ROHF) calculations. This program is designed entirely for training and educational purposes; therefore, parallelization techniques such as OpenMP and OpenMPI have been deliberately avoided. The aim of this program is to help users understand the detailed code implementation of the Hartree-Fock method. It employs extensive object-oriented programming techniques. The main.cpp file manages the standard input and output flow which use JSON(nlohmann code base) format, while cal.cpp controls the computational process, which is further decomposed into multiple objects. For ease of understanding, clear and explicit variable naming is used, along with a large number of Chinese comments to assist comprehension. 

There are a few things to note. First, regarding ROHF, I believe it's an extension of RHF. Therefore, if you specify RHF as the method but a multiplicity other than 1, ROHF calculations will be automatically performed. Second, regarding UHF, the initial guess currently only supports H0. When n_alpha = n_beta, UHF is forced to converge to a symmetric solution like RHF. I've added random perturbations to the code to break the symmetry of the initial guess. If you need to run asymmetric solutions like dissociation curves, please use the "symmetry" key and specify it as "break."

This project was developed with reference to and by adapting the open-source work of Rui Li, originally released in 2020 under the MIT License, located in https://github.com/Walter-Feng/Hartree-Fock-in-CPP.git. In the process of studying, borrowing and rewriting his code, I learned good C++ Objected Oriented Programming and gained a deeper understanding of the specific implementation of Hartree-Fock. Building on his RHF functionality, I further implemented UHF and RoHF, but omitted the gradient and optimization aspects. I hereby express my sincere gratitude to Rui Li for his generous sharing. His project provided essential code resources and design ideas that significantly supported the training and implementation of this project.





